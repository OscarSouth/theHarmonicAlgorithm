module Utility where

import           Data.Map (fromListWith, toList)
import           Data.Set (Set)
import qualified Data.Set as Set (fromList, toList, empty, member, insert)
import qualified Data.List as List (sort, concat)

-- |nCr utility function
choose         :: (Num a, Eq a) => a -> [b] -> [[b]]
choose 0 _      = [[]]
choose k []     = []
choose k (x:xs) = map (x:) (choose (k-1) xs) ++ choose k xs

-- |helper function to replace
begins                           :: Eq a => [a] -> [a] -> Maybe [a]
begins string []         = Just string
begins (x : xs) (y : ys) | x == y = begins xs ys
begins _        _        = Nothing

-- |replace occurences in a String
replace               :: Eq a => [a] -> [a] -> [a] -> [a]
replace from to string =
  case begins string from of
      Just remains -> to ++ remains
      Nothing      -> case string of
                        []     -> []
                        x : xs -> x : replace from to xs

-- |function to reduce data down to ordered list of unique instances
unique :: Ord a => [a] -> [a]
unique = rmdups' Set.empty where
  rmdups' _ [] = []
  rmdups' a (b : c) = if Set.member b a
    then rmdups' a c
    else b : rmdups' (Set.insert b a) c

-- uniqueAnalysis :: Ord a => [a] -> [a]
-- uniqueAnalysis :: (Ord a0, Ord a1, Ord b0, Ord c0, Ord d0, Ord a2, Ord b1, Ord b2, Ord f0) 
--   => [((a0, [[a1]]), b0, c0, d0, ((a2, b1), b2), f0)] 
--   -> [((a0, [[a1]]), b0, c0, d0, ((a2, b1), b2), f0)]


    
-- |function to count elements in a list
countElem     :: Eq a => [a] -> a -> Int
countElem xs x = (length . filter (== x)) xs

-- |mapping from a list to association list of counts of elements
frequency :: (Ord a) => [a] -> [(a, Int)]
frequency xs = toList (fromListWith (+) [(x, 1) | x <- xs])

-- uniqueAnalysis :: Analysis -> Analysis
-- uniqueAnalysis analysis =  analysis
--   where


-- testData :: Analysis
-- testData = [((53,68,71),([0,1,3,8,10],[0,1,5,7,10],[0,1,4,7,8]),([1,3,2,1,3,0],[1,2,2,1,3,1],[2,0,2,3,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,3,5,7,8,10],[0,1,4,5,7,8,10],[0,1,3,4,7,8,10])),
--   ((46,68,71),([0,3,7,8,10],[0,1,5,7,10],[0,1,4,7,8]),([1,2,2,2,3,0],[1,2,2,1,3,1],[2,0,2,3,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,3,5,7,8,10],[0,1,4,5,7,8,10],[0,1,3,4,7,8,10])),
--   ((46,47,71),([0,3,7,8,10],[0,1,5,8,10],[0,1,4,7,8]),([1,2,2,2,3,0],[1,2,2,2,3,0],[2,0,2,3,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,3,5,7,8,10],[0,1,4,5,7,8,10],[0,1,3,4,7,8,10])),
--   ((52,71,71),([0,2,7,9,11],[0,3,6,7,11],[0,4,6,7,9]),([1,3,2,1,3,0],[2,0,2,3,2,1],[1,2,3,1,2,1]),(8,[1,5,8,10]),((191,[0,2,3,4,6,7,9,11]),[4,5,6,5,6,2]),([0,2,3,6,7,9,11],[0,3,4,6,7,9,11],[0,2,4,6,7,9,11])),
--   ((52,71,71),([0,2,7,9,11],[0,4,6,7,9],[0,3,6,7,11]),([1,3,2,1,3,0],[1,2,3,1,2,1],[2,0,2,3,2,1]),(8,[1,5,8,10]),((191,[0,2,3,4,6,7,9,11]),[4,5,6,5,6,2]),([0,2,4,6,7,9,11],[0,3,4,6,7,9,11],[0,2,3,6,7,9,11])),
--   ((52,53,71),([0,5,7,8,10],[0,1,3,8,10],[0,1,4,7,8]),([1,3,2,1,3,0],[1,3,2,1,3,0],[2,0,2,3,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,3,5,7,8,10],[0,1,3,4,7,8,10],[0,1,4,5,7,8,10])),
--   ((52,71,71),([0,5,7,8,10],[0,1,3,7,10],[0,1,4,7,8]),([1,3,2,1,3,0],[1,2,3,1,2,1],[2,0,2,3,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,3,5,7,8,10],[0,1,3,4,7,8,10],[0,1,4,5,7,8,10])),
--   ((52,71,71),([0,5,7,8,10],[0,1,4,7,8],[0,1,3,7,10]),([1,3,2,1,3,0],[2,0,2,3,2,1],[1,2,3,1,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,4,5,7,8,10],[0,1,3,4,7,8,10],[0,1,3,5,7,8,10])),
--   ((52,68,71),([0,5,7,8,10],[1,3,7,8,10],[0,1,4,7,8]),([1,3,2,1,3,0],[1,2,2,1,3,1],[2,0,2,3,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,3,5,7,8,10],[0,1,3,4,7,8,10],[0,1,4,5,7,8,10])),
--   ((68,68,71),([0,1,5,7,10],[1,3,7,8,10],[0,1,4,7,8]),([1,2,2,1,3,1],[1,2,2,1,3,1],[2,0,2,3,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,3,5,7,8,10],[0,1,3,4,7,8,10],[0,1,4,5,7,8,10])),
--   ((46,68,71),([0,4,7,9,11],[0,2,6,7,9],[0,3,6,7,11]),([1,2,2,2,3,0],[1,2,2,1,3,1],[2,0,2,3,2,1]),(8,[1,5,8,10]),((191,[0,2,3,4,6,7,9,11]),[4,5,6,5,6,2]),([0,2,4,6,7,9,11],[0,2,3,6,7,9,11],[0,3,4,6,7,9,11])),
--   ((47,71,71),([0,1,5,8,10],[0,1,3,7,10],[0,1,4,7,8]),([1,2,2,2,3,0],[1,2,3,1,2,1],[2,0,2,3,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,3,5,7,8,10],[0,1,3,4,7,8,10],[0,1,4,5,7,8,10])),
--   ((47,71,71),([0,1,5,8,10],[0,1,4,7,8],[0,1,3,7,10]),([1,2,2,2,3,0],[2,0,2,3,2,1],[1,2,3,1,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,4,5,7,8,10],[0,1,3,4,7,8,10],[0,1,3,5,7,8,10])),
--   ((47,68,71),([0,1,5,8,10],[1,3,7,8,10],[0,1,4,7,8]),([1,2,2,2,3,0],[1,2,2,1,3,1],[2,0,2,3,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,3,5,7,8,10],[0,1,3,4,7,8,10],[0,1,4,5,7,8,10])),
--   ((68,68,71),([1,3,7,8,10],[0,1,5,7,10],[0,1,4,7,8]),([1,2,2,1,3,1],[1,2,2,1,3,1],[2,0,2,3,2,1]),(8,[2,6,9,11]),((191,[0,1,3,4,5,7,8,10]),[4,5,6,5,6,2]),([0,1,3,5,7,8,10],[0,1,4,5,7,8,10],[0,1,3,4,7,8,10]))]

