'.source.tidalcycles':
  'pattern block':
    'prefix': 'p'
    'body': '''
      p$1 f s r d = d$1 $ do
        let o = ch $1
        f
          $ stack [silence
             -- --
            ,arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,"$2"
            ]# o |* vel 1
             -- --
          ] |* vel d
      $3
    '''

  'arrange block':
    'prefix': 'arrange'
    'body': '''
      arrange flow (overlapF 0 s) r (-9,9) ["~"
      ,"$2"
      ]# o |* vel 1
       -- --
    '''

  'sine wave timbre':
    'prefix': 'sine'
    'body': '''
      sine f s r d = p "sinewave" $ do
        let o = ch 2
        f
          $ stack [silence
             -- --
            ,arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,"$1"
            ]# o |* vel 1
             -- --
          ] |* vel d
      $2
    '''

  'piano timbre':
    'prefix': 'jazz'
    'body': '''
      jazz f s r d = p "piano" $ do
        let o = ch 3
        f
          $ stack [silence
             -- --
            ,arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,"$1"
            ]# o |* vel 1
             -- --
            ,wonky 0
             -- --
          ] |* vel d
      $2
    '''

  'boeing drone timbre':
    'prefix': 'lboe'
    'body': '''
      lboe f s r d = p "boeingdrone" $ do
        let o = ch 5
        f
          $ stack [silence
             -- --
            ,arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,"$1"
            ]# o |* vel 1
             -- --
          ] |* vel d
      $2
    '''

  'boeing impact timbre':
    'prefix': 'hboe'
    'body': '''
      hboe f s r d = p "boeingimpact" $ do
        let o = ch 6
        f
          $ stack [silence
             -- --
            ,arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,"$1"
            ]# o |* vel 1
             -- --
          ] |* vel d
      $2
    '''

  'electric bass overtones':
    'prefix': 'hmnx'
    'body': '''
      hmnx f s r d = p "bassovertones" $ do
        let o = ch 7
        f
          $ stack [silence
             -- --
            ,ecbc s r (stack ["~"
              ,"$1"
            ])# o |* vel 1
             -- --
          ] |* vel d # legato 1.0
      $2
    '''

  '303 timbre':
    'prefix': 't303'
    'body': '''
      t303 f s r d = p "tubeblip" $ do
        let o = ch 8
        f
          $ stack [silence
             -- --
            ,mono $ sometimes palindrome $ arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,"$1"
            ]# o |* vel 1
             -- --
            ,slope (slow 24 $ lfo tri 0.4 0.6)
            ,bright (slow 32 $ lfo tri 0 0.2)
            ,reso (slow 48 $ lfo tri 0.6 0.7)
            ,contour (slow 72 $ lfo tri 0.85 0.98)
            ,waveform "[0 1]/8" # ch 8
             -- --
          ] |* vel d
      $2
    '''

  '909 rhythm':
    'prefix': 'k909'
    'body': '''
      k909 f d = p "sampled909" $ do
        let o = ch 9
        f
          $ stack [silence
             -- --
            ,$1
             -- --
          ]# o # legato 0.01 |* vel d
      $2
    '''

  'MPC rhythm':
    'prefix': 'kMPC'
    'body': '''
      kMPC f d = p "mpckit" $ do
        let o = ch 10
        f
          $ stack [silence
             -- --
            ,$1
             -- --
          ]# o # legato 0.01 |* vel d
      $2
    '''

  'moog dfam':
    'prefix': 'mfam'
    'body': '''
      mfam f s r d = p "moogDFAM" $ do
        let (trig,osc1,osc2) = ch <$> (11,12,13)
        let pat = "$1"
        f
          $ stack [silence
             -- --
            ,steptrig "[1 2 3 4 5 6 7 8]/2"
             -- --
            ,mono $ arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,pat
            ]# osc1 |* vel 1 |- oct 1
             -- --
            ,mono $ arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,pat
            ]# osc2 |* vel 1 |- oct 1
             -- --
          ] |* vel d
      $2
    '''

  'moog mother32':
    'prefix': 'moog'
    'body': '''
      moog f s r d = p "moogMother32" $ do
        let o = ch 14
        f
          $ stack [silence
             -- --
            ,mono $ arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,"$1"
            ]# o |* vel 1
             -- --
            ,portamento 0.0
             -- --
          ] |* vel d
      $2
    '''

  'sh101':
    'prefix': 's101'
    'body': '''
      s101 f s r d = p "sh101" $ do
        let o = ch 15
        f
          $ stack [silence
             -- --
            ,arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,"$1"
            ]# o |* vel 1
             -- --
            -- ,attack 0.3
            -- ,decay 0.5
            -- ,cutoff 0.7
            -- ,res 0.3
            -- ,filterenv 0.6
            -- ,keytrack 0.8
             -- --
          ] |* vel d
      $2
    '''

  'juno':
    'prefix': 'juno'
    'body': '''
      juno f s r d = p "juno" $ do
        let o = ch 16
        f
          $ stack [silence
             -- --
            ,arrange flow (overlapF 0 s) r (-9,9) ["~"
              ,"$1"
            ]# o |* vel 1
             -- --
          ] |* vel d
      $2
    '''

  'orchestrator':
    'prefix': 'orch'
    'body': '''
      do
        let
          dyn = 0.9
          rep = 2
          s = transpose (0) state
          f = (swingBy 0.07 2)
          (d,r) = ((*dyn),rep)
        putStrLn . show $ s
        mapM_ id [hush, setbpm tempo
          -- ,count s r   $d 0.6
          -- ,rise 32 s r $d 0.99
          -- ,sine f s r  $d 0.7
          -- ,jazz f s r  $d 0.7
          -- ,lboe f s r  $d 0.7
          -- ,hboe f s r  $d 0.7
          -- ,hmnx f s r  $d 0.7
          -- ,t303 f s r  $d 0.7
          -- ,k909 f      $d 0.7
          -- ,kMPC f      $d 0.7
          -- ,mfam f s r  $d 0.7
          -- ,moog f s r  $d 0.7
          -- ,s101 f s r  $d 0.7
          -- ,juno f s r  $d 0.7
        ]
      $1
    '''

  'transport':
    'prefix': 'transport'
    'body': '''
      mapM_ id [p "transport"
        $ do
        let
          out = 999999
        --
        seqP
          $ sync out ++ [runSeq
        --
          ]
        --
        ,resetCycles
        ,hush
        ,allNotesOff
        ,setcps (tempo/60)
        ]
      $1
    '''

  'the harmonic algorithm':
    'prefix': 'harmonicAlgorithm'
    'body': '''
      next <- gammaGen 1 0.3
        >>= \\rns ->
        chainCadence sharp
        (initCadenceState (head rns) "$1" [0,$2])
        -- (lastCadence state)
        (harmonicContext
        -- overtones
          "*"
        -- tonality
          "$3"
        -- roots
          "$4"
        )
        4 -- len
        1.5 -- entropy

      state = rotate (0) next
      $2
    '''

