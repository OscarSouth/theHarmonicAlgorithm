blueInGreen = fmap i <$> pcSet <$>
  [ [10, 2, 9, 4], [10, 2, 9, 4], -- Bar 1: B♭maj7♯11
    [9, 1, 7, 10], [9, 1, 7, 0],  -- Bar 2: A7♯9
    [2, 5, 0, 11], [1, 5, 11, 3], -- Bar 3: Dm13 | D♭9
    [0, 3, 10, 5], [11, 3, 9, 7], -- Bar 4: Cm11 | B7♯5
    [10, 2, 9, 5], [10, 2, 9, 5], -- Bar 5: B♭maj7♯11
    [9, 1, 7, 5], [9, 1, 7, 5],   -- Bar 6: A7♭13
    [2, 5, 0, 11], [2, 5, 0, 11], -- Bar 7: Dm13
    [4, 8, 2, 5], [4, 8, 2, 5],   -- Bar 8: E7♭13
    [9, 0, 7, 11], [9, 0, 7, 11], -- Bar 9: Am9
    [2, 5, 1, 9], [2, 5, 1, 9]    -- Bar 10: Dm7
  ]

state = prog flat blueInGreen

melodyAbs = slow 8 $ slowcat [
    "[4@3 2]"
  , "[0@3 -2]"
  , "[-3@3 -5]"
  , "[-7 4@3]"
  , "[-8@3 -10 -11 -10 -5 -3]"
  , "[0@3 -3]"
  , "[-5@3 -7]"
  , "[0@3 -4]"
  , "[0@3 -3]"
  , "[5@3 1]"
  ]

melodyRel = slow 8 $ slowcat [
    "[1@3 0]",
    "[-1@3 -2]",
    "[-2@3 -3]",
    "[-4 0]",
    "[1@3 0 -1 0 2 3]",
    "[-1@3 -2]",
    "[-3@3 -4]",
    "[-1@3 -3]",
    "[-1@3 -2]",
    "[1@3 -1]"
  ]

-- melodyRel = "[[1@3 0] [-1@3 -2] [-2@3 -3] [-4 0] [1@3 0 -1 0 2 3] [-1@3 -2] [-3@3 -4] [-1@3 -3] [-1@3 -2] [1@3 -1]]/80"

scales = concatMap (replicate 2) [
    [2, 4, 7, 9, 11],     -- Bar 1: G Major Shape
    [2, 5, 7, 10, 12],    -- Bar 2: G Minor Shape
    [2, 5, 7, 9, 12],     -- Bar 3: D Minor Shape
    [2, 5, 7, 10, 12],    -- Bar 4: B♭ Major Shape
    [2, 4, 5, 9, 13],     -- Bar 5: Synthesized Shape
    [2, 5, 7, 9, 12],     -- Bar 6: F Major Shape
    [2, 5, 7, 9, 12],     -- Bar 7: D Minor Shape
    [2, 4, 8, 11, 12],    -- Bar 8: Synthesized Shape
    [2, 4, 7, 9, 11],     -- Bar 9: G Major Shape
    [2, 5, 9, 12, 13]     -- Bar 10: Synthesized Shape
  ]

literal :: Progression -> [[Integer]]
literal (Progression (chords, _, _)) = fromChord <$> chords

melodyState = prog flat scales

junoA f s r d = d01 $ do
  let o = ch 16
  f
    $ stack [silence
       -- --
      ,swingBy 0.07 4 $ note $ melodyAbs
       -- --
    ] #o |* vel d |+ oct 1

junoR f s r d = d02 $ do
  let o = ch 16
  f
    $ stack [silence
       -- --
      ,arrange flow melodyState r (-9,12) ["~"
        -- ,iter 4 $ run 8
        ,slow 2 $ degrade $ iter 4 $ fast 8 $ melodyRel
        -- ,slow 8 melodyRel
      ]# o |* vel 0.7 |+ oct 1
       -- --
    ] |* vel d

jazz f s r d = p "piano" $ do
  let o = ch 3
  f
    $ stack [silence
       -- --
      ,arrange flow (overlapF 0 s) r (-9,9) ["~"
        -- ,"[1,2,3,4]/8"
        ,"[]/8"
        ,"[-8]/8"
      ]# o |* vel 0.8
       -- --
    ] |* vel d


k909 f d = p "909kit" $ do
  let o = ch 9
  f
    $ stack [silence
       -- --
      ,hh "[0 1]" |* vel (lfo saw 0.4 0.8)
      ,kick "1" #vel 0.9
      ,snap "<0 1>" |* vel 0.4
      ,hh "[1 1 2 1]" |* vel (lfo saw 0.2 0.8)
       -- --
    ]# o # legato 0.01 |* vel d

sine f s r d = p "sinewave" $ do
  let o = ch 02
  f
    $ stack [silence
       -- --
      ,arrange flow (overlapF 0 s) r (-9,9) ["~"
        -- ,"[-2,3]/4"
        -- ,"[0,4]/4"
        ,"[-8,-4]/4"
      ]# o |* vel 0.8
       -- --
       ,(swingBy 0.07 4 $ note $ melodyAbs) |+ oct 1
       -- --
    ] |* vel d #o


mfam f s r d = p "moogDFAM" $ do
  let (osc1,osc2) = (ch 11,ch 12)
  let pat = "[0 1 2 3]/4"
  f
    $ stack [silence
       -- --
      ,steptrig "[1 2 3 4 5 6 7 8]/2"
       -- --
      ,arrange flow melodyState r (-9,9) ["~"
        ,degrade $ iter 4 $ fast 2 $ pat
      ]# osc1 |* vel 1 |- oct 1
       -- --
      ,sometimes palindrome $ slow 2 $ arrange flow s r (-9,9) ["~"
        ,"0(3,8)"
      ]# osc2 |* vel 1 |- oct 2
       -- --
    ]# legato 0.25 |* vel d



moog f s r d = p "moogMother32" $ do
  let o = ch 14
  id
    $ stack [silence
       -- --
      , stack ["~"
        ,(swingBy 0.07 4 $ note $ melodyAbs)
      ]# o |* vel 1 |+ oct 0
       -- --
      ,portamento 0.3
       -- --
    ] |* vel d
