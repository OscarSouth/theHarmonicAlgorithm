tempo = 120

p14 f s r d = d14 $ do
  id $
    f $
      -- slowstripe 2 $
      slow (choose [1,2,4]) $ mask (binary 151) $
      scramble 4 $
      arrange flow (overlapF 0 s) r (-9,9) ["~"
        -- ,"[0 0 2 0 1 2 3 4]"
        ,slow 4 $ run 8 |- 1
      ] |= vel ((segment 4 $ rand) |+ (slow 2 $ lfo saw 0 1))
      -- |* vel (choose [0.2, 1])
      |- oct 1
      |= ch 14
      |* vel d

p15 f s r d = d15 $ do
  id $
    f $
    slow 4 $ trunc 0.5 $ fast 4 $
    struct (slow 2 $ binary $ 128 + 64) $
      arrange flow s r (-9,9) ["~"
        ,"[-1,0,1]/8"
      ]# ch 15
      |* vel d

p12 f s r d = d12 $ do
  id $
    f $
      arrange flow s r (-9,9) ["~"
        ,"[0 1 . 2]" |- 3
      ]# ch 12
      |* vel d

-- apply rep f = (slow rep) . f . (fast rep)

-- truncL rep loc = (slow rep) . (trunc loc) . (fast rep)

-- truncL rep loc = (slow rep) $ (trunc loc) $ (fast rep)

 -- DFAM STEPTRIG
p11 f = d11 $ id
  $ mono
  $ f
  $ degradeBy 0.1
  $ struct (binary $ 128 |+ irand 128)
  $ 0.036 <~ stack [ silence
  , steptrig $ "[1 2 3*2 4 5*2 6 7*4 8*2]/2"
  ]# ch 11

p12 f s r d = d12 $ do
  id $
    f $
    -- scramble 4 $
      0.036 <~ arrange flow s r (-9,9) ["~"
        -- ,run 4
        ,-3
      ]# ch 12
      |* vel d

p13 f s r d = d13 $ do
  id $
    f $
    -- struct (binary 255) $
    -- scramble 2 $
    -- slowstripe (choose [2,4]) $
      0.036 <~ arrange flow s r (-9,9) ["~"
        ,run 4
      ]# ch 13
      -- |+ oct 1
      |* vel d

p14 f s r d = d14 $ do
  id $
    f $
      arrange flow s r (-9,9) ["~"
        ,"[-6]"
      ]# ch 14
      |* vel d

p16 f s r d = d16 $ do
  id $
    -- within ( )
    slow 2 $ someCyclesBy 0.8 (struct (binary $ 128 + 32 + 16)) $
    slow 4 $
    stripe (choose [2,3,4]) $
    scramble 4 $
    f $
      arrange flow (overlapF 1 s) r (-9,9) ["~"
        ,"0 3" |+ irand 2
        -- ,"0 1 2 3 5 6 7 8"
        -- ,run 8
      ]# ch 16
      |+ oct 1
      |* vel d

 -- RHYTHM
p10 f d = d10 $ id
  $ f
  $ stack [ silence
    ,kick "1"
    ,hh "0 1"
    ] |* vel d

p16 f s r d = d16 $ do
  let p1 = qlink2 --> [-2..8]
  let p2 = slow 4 $ (segment 128 $ lfo sine 0 1) --> [8..(-2)]
  id $
    f $
      slow p2 $
      stack [n "~"
          -- --
        ,arrange flow (overlapF 1 s) r (-12,12) ["~"
        ,3 +| "[0 1 2 3]" <-- p1
        -- ,"[0 1 2 3]" |+ segment 128 (qlink2 --> [-2..6])
        ,"[-6?]*2"
        ] |* vel 0.99 |= ch 16 |- oct 1
          -- --
        ,kick "[1?]*2" |= vel 0.2
        -- ,crash "[1]*2" |= vel 1
          -- --
      ] |* vel d

let (<--) ctrl xs pat = pat |+ segment 128 (over ctrl xs)

qlink2 over [1,2,3]

state = prog flat [[2,5,9],[2,5,7],[0,5,7],[0,7,10]]

initCadenceState (head rns) "C" [0,5,7])

extract 1 state


let overP ctrl pat =
      let xs = words pat
          step = 1 / fromIntegral (length xs)
      in fmap (\x -> xs !! floor (min (fromIntegral (length xs - 1)) (x / step))) ctrl


-- Over by explicit segmentation length
overBy :: Int -> Pattern Double -> [a] -> Pattern a
overBy n ctrl vals = segment n $ fmap select idxs
  where
    idxs = fmap (\x -> floor (x * fromIntegral n)) ctrl
    select i = vals !! (min (length vals - 1) i)

-- Syntactic sugar
over :: Pattern Double -> [a] -> Pattern a
over = overBy <$> length

riser len s r d = d09 $ do
  id $
    slow (len*4) $
      stack [n "~"
          -- --
        ,arrange flow s r (-9,9) ["~"
        ,"[0]/2"
        ] |* vel 0.99
          -- --
        ,segment 256 $ cc 1 $ fastcat [ 0
          ,0
          ,lfo saw 0 0.1
          ,lfo saw 0.1 0.3
          ,lfo saw 0.3 0.6
          ,lfo saw 0.6 1
          ]
          -- --
      ]# ch 09
      |* vel d

metronome d = p "click" $ click "1" |= vel "[0.8 0.4!3]/4" |* vel d


p16 f s r d = d16 $ do
  let p1 = qlink2 --> [-2..8]
  let p2 = slow 4 $ lfo tri qlink3 1 --> [-2..8]
  id $
    f $
      -- slow p1 $
      slow p2 $
      stack [n "~"
          -- --
        ,arrange flow (overlapF 1 s) r (-12,12) ["~"
        ,3 +| "[0 1 2 3]" <-- p1
        -- ,"[0 1 2 3]" |+ segment 128 (qlink2 --> [-2..6])
        ,"[-9]*2" <-- p2
        ] |* vel 0.99 |= ch 16 |- oct 1
          -- --
        -- ,kick "[1?]*2" |= vel 0.2
        -- ,crash "[1]*2" |= vel 1
          -- --
      ] |* vel d

-- worked at the end of the session -- XTypeSynonymInstances or XFlexibleContexts?

over ctrl xs =
  let step = 1 / fromIntegral (length xs)
   in fmap (\x -> xs !! floor (min (fromIntegral (length xs - 1)) (x / step))) ctrl

(-->) ctrl xs = over ctrl xs

(<--) pat ctrlMap = pat |+ segment 128 ctrlMap
