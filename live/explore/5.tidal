 -- DRUM MACHINE
p10 f d = d10 $ id
  $ f
  $ stack [ silence
  -- , (2/4) <~ midinote "0(3,16)/4" |* vel 0.9 |+ humanise 0.1
  , midinote "0" |* vel 0.9 |+ humanise 0.1
  -- , midinote "[5 4]" |* vel 0.5 |+ humanise 0.1
  -- , degradeBy 0.9 $ (1/4) <~ midinote "0" |* vel 0.1 |+ humanise 0.1
  , midinote "[2]*2" |+ vel (lfo tri 0.01 0.7) |+ humanise 0.1
  -- , degrade $ (1/4) <~ midinote "[2?]?*2" |+ vel (lfo tri 0.01 0.67) |+ humanise 0.8
  -- , (2/4) <~ (slow 2 $ midinote "[4]*2" |+ vel (slow 2 $ lfo tri 0.05 0.2) |+ humanise 0.1)
  -- , midinote "[2 2 3 2]" |+ vel (lfo tri 0.3 0.7) |+ humanise 0.1
  -- , midinote "[~ 1]/2" |+ vel 0.5 |+ humanise 0.1
  -- , midinote "[~ 7]/2" |+ vel 0.99 |+ humanise 0.1
  -- , struct (binary 10) $ degradeBy 0.5 $ sometimes (rev) $ stut 3 2 0.25 $ midinote "[6(5,8)?]?/2" |* vel (0.25 <~ (slow 2 $ lfo sine 0.1 0.5)) |* vel (lfo tri 0.1 0.7) |+ humanise 0.4
  -- , degradeBy 0.1 $ midinote "[6(3,8)]/2" |* vel (0.5 <~ (slow 2 $ lfo sine 0.2 0.6)) |* vel (lfo tri 0.2 0.8) |+ humanise 0.4
  -- , slow 2 $ struct (binary 12) $ slow 2 $ rev $ stut 3 1 0.3 $ midinote "7*8" |* vel (lfo tri 0.1 0.7) |+ humanise 0.2
  -- , degradeBy 0.4 $ stut 6 2 0.2 $ midinote "7(9,16)?/2" |* vel (0.1 <~ (slow 3 $ lfo tri 0.1 0.7)) |+ humanise 0.3
  -- , midinote "[~ ~ ~ 0? . ~ ~ ~ 0?]/2?" |+ vel (slow 2 $ lfo saw 1 0.1) |+ humanise 0.1
  -- , degradeBy 0.7 $ midinote "7(5,8)" |* vel (0.2 <~ (slow 4 $ lfo sine 0.2 0.8)) |+ humanise 0.4
  -- , degradeBy 0.5 $ stut 3 2 0.25 $ midinote "[7(3,8)?]/2" |* vel (0.25 <~ (slow 2 $ lfo sine 0.1 0.5)) |* vel (lfo tri 0.1 0.7) |+ humanise 0.4
  -- , midinote "[0]/4" |+ vel 0.99 |+ humanise 0.1
  -- , degradeBy 0.5 $ stut 4 2 0.25 $ midinote "[7(3,8)?]?/2" |* vel (slow 3 $ sine) |+ humanise 0.4
  -- , slow 4 $ rev $ stut 5 2 0.25 $ midinote "7(7,16)" |* vel (slow 2 $ lfo tri 0.1 0.7) |+ humanise 0.25
  -- , sometimes (rev) $ degradeBy 0.7 $ midinote "7(5,8)" |* vel (slow 6 $ lfo sine 0.1 0.6) |+ humanise 0.4
  -- , slow 3 $ sometimesBy 0.3 (rev) $ midinote "[7(4,8)? . ~ 7(3,8)?]/2" |* vel (lfo tri 0.1 0.7) |+ humanise 0.4
  -- , midinote "[0 ~ ~ ~ 0 ~ ~ ~]/2" |+ vel 0.7 |+ humanise 0.1
  -- , midinote "[4 ~ 4 ~ ~ 4 ~ ~]" |+ vel (slow 2 $ lfo sine 0.2 0.6) |+ humanise 0.2
  -- , midinote "4(3,8)" |+ vel (slow 2 $ sine) |+ humanise 0.4
  -- , midinote "[0 ~ ~ ~ ~ 0 ~ ~]/2" |+ vel "[0.6 0.4]" |+ humanise 0.15
  -- , midinote "[0 ~ ~ ~ ~ ~ ~ 0?]/2" |+ vel "[0.9 0.4]" |+ humanise 0.2
  -- , midinote "0(3,16)?/2" |+ vel (slow 2 $ sine) |+ humanise 0.2
  -- , sometimesBy 0.5 (rev) $ midinote "[0 ~ 0 ~ ~ ~ ~ ~]/2" |+ vel "[0.6 0.4]" |+ humanise 0.2
  -- , midinote "0(2,16)?/2" |+ vel 0.7 |+ humanise 0.15
  -- , degradeBy 0.7 $ midinote "0(3,16)?/2" |+ vel (lfo tri 0.1 0.3) |+ humanise 0.2
    ] # ch 10
    |= sustain 0.05
    |+ humanise 0.1
    |* vel d

 -- DFAM STEPTRIG
p11 f = d11 $ id
  $ mono
  $ f
  -- $ rev
  $ stack [ silence
  -- , steptrig "[1 2 3 4 5 6 7 8]"
  -- , rev $ steptrig $ "[1 2 3 4]"
  -- , slow 2 $ steptrig $ "0(3,8)" |+ "1 2 1"
  -- , slow 2 $ steptrig $ "[~ 0]*2" |+ "[4 3 2 1]/2"
  , iter 4 $ steptrig $ "[1 2 3 4 5 6 7 8]/2" |* 2
  -- , steptrig $ run 8
  ] # ch "11"

 -- DFAM OSC1pitch+gate
p12 f s r d = d12 $ do
  id $
    f $
    -- trunc 0.95 $
    -- stut 2 0.5 0.5 $
    -- striate 4 $
    arrange flow s r (-9,9) [ "~"
      ,"2"
      -- ,"[0 1 2 3]"
      -- ,"[[0 3] 0 [1 . 2 3] -1]/4"
      -- ,"[~ [1,2,3]]/2"
      -- , "[0 2 3 1]/4" +| "[0 2]"
      -- , "[-3 <-4 -5>]/2"
      -- , (struct (fast 0.5 $ binaryN 8 123) "[[0 2 4 6 5 4 3 2] ~]/4") |+ "[0 0 1 2 3 3 4 5]/64"
      -- , "[[~!7 ~] ~ ~ ~]/8"
      -- , "[[0 ~] ~!8]/4"
      -- , "[[0 1 2 3] [6 4 -1 0] . ~ ]/4"
      -- , "[[0 1 2 3] [6 4 -1 [0,4]] . ~ ]/4"
      ] |* vel d #ch "12"
         |- oct 1
         -- |+ legato 1.25

p13 f s r d = d13 $ do
  id $
    f $
      arrange flow s r (-9,9) ["~"
        -- ,palindrome $ iter 4 $ slow "[4 2 1 2]" $ "[0 1 2 3]"
        -- ,slow 8 $ "[0 1 2 3]" |+ 3
        -- ,"[0 1 2 3]" |+ "[0 1 2 3]/4" |- 3
        ,"[1]"
      ]# ch 13
      |* vel d
      -- |- oct 1

  -- S-1
p15 f s r d = d15 $ do
  id $
    f $
      stack [n "~"
          -- --
        ,arrange s r (-9,9) ["~"
        -- ,"0"
        -- ,struct (binary 122) $ "[0]*4" |+ "[0 . 1 2]/8"|+ "<0 0 1 2>" -- +| "[0(3,8)/4]"
        -- ,fast "<1 1 2 1>" $ iter 4 "[0 2 4 3]/4"
        ,"[0,1,2,3]/2"
        -- ,"[1,3]/2"
        -- ,"[~ <[1,-1] ~>]"
        -- ,palindrome "[0 1 2 <3 4>]"
        -- ,iter 4 "[0 1 2 3]"
        -- ,struct ("[1(5,16)]/8") $ iter 4 "[0 1 2 3]" |+ "[-3 0 3 6]/4"
        -- ,"[~ [1,3]]"
        ] -- |* vel (lfo saw 0.5 1)-- |= legato 0.5
      ]# ch 15
      |= legato 0.01
      |* vel d
      -- |+ oct 1

p14 f s r d = d14 $ do
  id $
    f $
      mono $
      rotL 1 $
      slow 4 $ trunc 0.75 $ fast 4 $
      stack [n "~"
          -- --
        ,arrange flow s r (-9,9) ["~"
        -- , "[<0 -3>  <-1 -2>]/2" |+ "[-6]"
        -- , "[0*2]" |+ "[-6]"
        , "[0!4]" |+ "[-9 -6!3]" |- "[0 1]"
        -- , "[0 ~ ~ 0 ~ ~ ~ ~]/4" |+ "[-6]"
        -- , "[0 ~@2 0 ~@3 0 . ~ 0 ~ [2 6?]?]/4" |+ "[-9 -6@3]/4"
        -- , "[0 ~ 0 ~ [~ 0] ~ ~ [2 ~]]/4" |+ "[-9 -5]/4"
        -- , "[0 0 ~@2 0 ~ [2 0] ~]/4" |+ "[-9@3 -5]/4"
        -- , rotL 1 $ "[0 ~ 0 ~ 2 ~ 0 ~]/4" |+ "[-12 -9]/4"
        -- , "[0 0 0 0 2 2 2 2]/4" |+ "[-9 -4]"
        -- , "[0 2 -1 2 0 3 -2 1]/4" |+ "[-9 -5]"
        -- , rotL 2 $ "[0 0 2 0 0 2 0 0]/4" |+ "[-9 -5]"
      ]
      -- , cc 1 "1 0"
      ]# ch 14
      |* vel d
      |= legato 0.06

applyProg :: VoiceFunction -> Progression -> Pattern Time -> Pattern Int -> Pattern ValueMap
applyProg voiceFunc prog len pat =
  slow (4*len) (cat $ note <$>
  (`toScale` (fast (4*len) pat)) <$>
    fmap fromInteger <$> voiceFunc prog
  )

voiceRange :: (Int, Int) -> Pattern Int -> Pattern Int
voiceRange (lo,hi) = filterEvents (\e -> value e >= lo && value e <= hi)

arrange :: VoiceFunction -> Progression -> Pattern Time -> (Int, Int) -> [Pattern Int] -> Pattern ValueMap
arrange voiceFunc prog rep register pats =
  let pat = stack pats
      rangedPattern = voiceRange register pat
      applyProg voiceFunc prog len pat =
        slow (4*len) (cat $ note <$>
          (`toScale` (fast (4*len) pat)) <$>
          fmap fromInteger <$> voiceFunc prog
          )
   in applyProg voiceFunc prog rep rangedPattern

-- modality :: Progression -> Pattern Time -> Pattern Int -> Pattern ValueMap
-- modality prog len pat =
--   slow (4*len) (cat $ note <$>
--   (`toScale` (fast (4*len) pat)) <$>
--     fmap fromInteger <$> harmony prog
--   )

-- arrangeMelody :: Progression -> Pattern Time -> (Int, Int) -> [Pattern Int] -> Pattern ValueMap
-- arrangeMelody prog len register pats =
  -- let pat = stack pats
      -- rangedPattern = voiceRange register pat
   -- in applyProg (overlapPassing prog 3) len rangedPattern

-- harmonic :: Progression -> Pattern Time -> (Int, Int) -> [Pattern Int] -> Pattern ValueMap
-- harmonic prog len register pats =
--   let pat = stack pats
--       rangedPattern = voiceRange register pat
--    in applyProg prog len rangedPattern
--
-- melodic :: Progression -> Pattern Time -> (Int, Int) -> [Pattern Int] -> Pattern ValueMap
-- melodic prog len register pats =
--   let pat = stack pats
--       rangedPattern = voiceRange register pat
--    in applyProg (overlapPassing prog 3) len rangedPattern
