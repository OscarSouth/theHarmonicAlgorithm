-- MOTIFS

hush

p08 f s r d = d08 $ do
  id $
    f $
      ecbc s r (iter 4 "[3 2 1 0]")
      |= ch 08
      |* vel d

 -- RISER
riser s r d = d09 $ do
  id $
    slow 128 $
      stack [n "~"
          -- --
        ,arrange flow s r (-9,9) ["~"
        ,"[0]/2"
        ] |* vel 0.99
          -- --
        ,segment 256 $ cc 1 $ fastcat [ 0
          -- ,rev $ lfo saw 1 0
          ,0
          ,lfo saw 0 0.1
          ,lfo saw 0.1 0.3
          ,lfo saw 0.4 1
          ]
          -- --
      ]# ch 09
      |* vel d

 -- DRUM MACHINE
p10 f d = d10 $ id
  $ f
  -- $ jux (rev)
  -- $ rarely (fast 2)
  -- $ stut 2 2 2
  $ stack [ silence
    -- , slow 4 $ kick $ binary 144
    ,kick "[1]"
    -- ,degradeBy 0.9 $ (1/4) <~ kick "1" |* vel 0.1
    -- , slow 2 $ (slow (cycleChoose [4,2,1]) $ hhcl $ binary (128 |+ irand 64)) |* vel (slow 2 $ lfo saw 0 1)
    -- ,slow 4 $ ride "[1 1]" |* vel "0.1 0.2"
    -- ,hhcl "[~ 1]"
    -- , slow 2 $ click "1(3,8)" |* vel (lfo saw 0.2 0.8) |* vel 0.7
    -- ,hhcl "[1 1 ~ 1]"
    -- ,hhop "[~ 1]"
    -- ,snap "[~ 1]/2"
    -- ,crash "[[1] [~]@2 [[1*4][1*8][1*16][1*32]]]/128" |* vel 0.07 |+ humanise 0.3
    -- ,crash "[1]/128" |* vel 0.2
    ] |* vel d
      |+ humanise 0.1


 -- DFAM STEPTRIG
p11 f = d11 $ id
  $ mono
  $ f
  $ stack [ silence
  , steptrig $ "[1 2 3 4 5 6 7 8]/2"
  ] #ch "11"

p12 f s r d = d12 $ do
  id $
    f $
      arrange root s r (-9,9) ["~"
        ,"[0]/4"
      ]# ch 12
      |- oct 1
      |* vel d

p13 f s r d = d13 $ do
  id $
    f $
      arrange root s r (-9,9) ["~"
        ,"[0]/4"
      ]# ch 13
      |- oct 1
      |* vel d

p14 f s r d = d14 $ do
  id $
    f $
      arrange root (overlapF 2 s) r (-9,9) ["~"
        -- ,slow "2 2 2 1" $ someCycles (palindrome) $ iter 4 $ "[0 1 2 3]"
        -- ,"[0]*2"
        ,"[2 3 4 3]"
      ]# ch 14
      -- |+ oct 1
      |* vel d


p15 f s r d = d15 $ do
  id $
    f $
    sometimes (jux rev) $
    iter 4 $
      arrange slim (s) r (-9,9) ["~"
        ,"[0 1 2 3 4 5 6 7]/8"
         -- ,"[0,2,4]/8" |+ 2
        -- ,"[~ [0 4]]"
      ]# ch 15 #legato 1
      |* vel d

p16 f s r d = d16 $ do
  id $
    f $
      degrade $
      arrange flow s r (-9,9) ["~"
        ,(2) <~ (slow 2 $ struct (binary (128|+irand 128)) $ iter 4 "[3 2 1 0]")
      ]# ch 16
      |+ oct 1
      |* vel d




-- import qualified Data.Map.Strict as Map

-- let overtoneMap = Map.fromList
--       [ (1,  (60, 0))        -- Unison
--       , (2,  (72, 0))        -- Octave
--       , (3,  (79, 0.01))     -- Perfect fifth +2c
--       , (4,  (84, 0))        -- Two octaves
--       , (5,  (88, -0.07))    -- Major third -14c
--       , (6,  (91, 0.01))     -- Fifth again +2c
--       , (7,  (94, -0.155))   -- b7 -31c
--       , (8,  (96, 0))        -- Three octaves
--       , (9,  (98, 0.02))     -- Second +4c
--       ]
--
-- -- overtones :: String -> Pattern Int -> Pattern ControlMap
-- overtones overtoneStr rhythm =
--   let overtoneNums = map read $ words overtoneStr :: [Int]
--       overtoneEvents = mapMaybe (`Map.lookup` overtoneMap) overtoneNums
--       notePat = slowcat $ map (\(n, _) -> pure n) overtoneEvents
--       bendPat = slowcat $ map (\(_, b) -> pure b) overtoneEvents
--   in n notePat
--      |+ bend bendPat
--      |* rhythm
--
--


-- -- Define overtone table as (note, bend)
-- let overtoneMap = [ (1,  (60, 0))
--                   , (2,  (72, 0))
--                   , (3,  (79, 0.01))
--                   , (4,  (84, 0))
--                   , (5,  (88, -0.07))
--                   , (6,  (91, 0.01))
--                   , (7,  (94, -0.155))
--                   , (8,  (96, 0))
--                   , (9,  (98, 0.02)) ]
--
-- let lookupOvertone n = case Prelude.lookup n overtoneMap of
--                          Just pair -> Just pair
--                          Nothing   -> Nothing
--
-- -- Load control def first
-- let bend = cF "bend"
--
-- -- Try a test pattern
-- d1 $ overtones "1 3 5 7"
--   # s "midi"
--   # midichan 1
--
-- let overtones str =
--       let overtoneNums = map read $ words str :: [Int]
--           overtoneEvents = [ pair | n <- overtoneNums
--                                   , Just pair <- [lookupOvertone n] ]
--           notePat = slowcat $ map (\(note, _) -> pure note) overtoneEvents
--           bendPat = slowcat $ map (\(_, bendval) -> pure bendval) overtoneEvents
--       in n notePat
--          |+ bend bendPat
--
--
-- let degree = pF "degree"
--     ctranspose = pF "ctranspose"
--     mtranspose = pF "mtranspose"
--     gtranspose = pF "gtranspose"
--     harmonic = pF "harmonic"
--     etune = pF "detune"
--     scalename = pS "scaleName"
--     tuning = pS "tuningName"
--     stepsPerOctave = pI "stepsPerOctave"
--     octaveRatio = pF "octaveRatio"
--
--
-- -- Just pitch control
-- d1 $ slow 2 $ s "gabor*8"
--     # degree "0 1 2 3 4 5 6 7"
--     # octave "4"
--     # mtranspose "{0 1}/8"
--     # ch 15
--
-- -- Named scale
-- d1 $ s "gabor*8"
--     # degree "0 1 2 3 4 5 6 7"
--     # scalename "ritusen"
--     # octave "4"
--     # ch 15
--
-- -- Custom tuning
-- d1 $ s "gabor*8"
--     # degree "0 1 2 3 4 5 6 7"
--     # scalename "ritusen"
--     # tuning "just"
--     # octave "4"
--     # ch 15

state
